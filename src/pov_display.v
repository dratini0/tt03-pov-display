/* Generated by Yosys 0.23 (git sha1 7ce5011c24b) */

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display.controller" *)
(* generator = "Amaranth" *)
module controller(rst, \$1 , clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$5  = 0;
  output [7:0] \$1 ;
  reg [7:0] \$1  = 8'h00;
  reg [7:0] \$1$next ;
  wire [8:0] \$2 ;
  wire [8:0] \$3 ;
  input clk;
  wire clk;
  input rst;
  wire rst;
  assign \$3  = \$1  + 1'h1;
  always @(posedge clk)
    \$1  <= \$1$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$5 ) begin end
    \$1$next  = \$3 [7:0];
    casez (rst)
      1'h1:
          \$1$next  = 8'h00;
    endcase
  end
  assign \$2  = \$3 ;
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display" *)
(* generator = "Amaranth" *)
module display(rst, \$1 , \$2 , \$3 , \$4 , \$5 , clk);
  input \$1 ;
  wire \$1 ;
  wire \$12 ;
  wire [7:0] \$13 ;
  input \$2 ;
  wire \$2 ;
  input \$3 ;
  wire \$3 ;
  input \$4 ;
  wire \$4 ;
  output [7:0] \$5 ;
  wire [7:0] \$5 ;
  wire [4:0] None_r_addr;
  wire [7:0] None_r_data;
  wire [4:0] None_w_addr;
  wire [7:0] None_w_data;
  wire None_w_en;
  input clk;
  wire clk;
  wire [7:0] controller_None;
  input rst;
  wire rst;
  wire spi_None;
  wire [7:0] \spi_None$10 ;
  wire \spi_None$11 ;
  wire \spi_None$8 ;
  wire \spi_None$9 ;
  reg [7:0] \$6  [31:0];
  initial begin
    \$6 [0] = 8'h00;
    \$6 [1] = 8'h00;
    \$6 [2] = 8'h00;
    \$6 [3] = 8'h00;
    \$6 [4] = 8'h00;
    \$6 [5] = 8'h00;
    \$6 [6] = 8'h00;
    \$6 [7] = 8'h00;
    \$6 [8] = 8'h00;
    \$6 [9] = 8'h00;
    \$6 [10] = 8'h00;
    \$6 [11] = 8'h00;
    \$6 [12] = 8'h00;
    \$6 [13] = 8'h00;
    \$6 [14] = 8'h00;
    \$6 [15] = 8'h00;
    \$6 [16] = 8'h00;
    \$6 [17] = 8'h00;
    \$6 [18] = 8'h00;
    \$6 [19] = 8'h00;
    \$6 [20] = 8'h00;
    \$6 [21] = 8'h00;
    \$6 [22] = 8'h00;
    \$6 [23] = 8'h00;
    \$6 [24] = 8'h00;
    \$6 [25] = 8'h00;
    \$6 [26] = 8'h00;
    \$6 [27] = 8'h00;
    \$6 [28] = 8'h00;
    \$6 [29] = 8'h00;
    \$6 [30] = 8'h00;
    \$6 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (None_w_en)
      \$6 [5'h00] <= None_w_data;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= None_r_addr;
  end
  assign None_r_data = \$6 [_0_];
  controller controller (
    controller_None,
    .clk(clk),
    .rst(rst)
  );
  spi spi (
    spi_None,
    \spi_None$8 ,
    \spi_None$9 ,
    \spi_None$10 ,
    \spi_None$11 ,
    .clk(clk),
    .rst(rst)
  );
  assign \$13  = 8'h00;
  assign None_w_en = \spi_None$11 ;
  assign None_w_data = \spi_None$10 ;
  assign None_w_addr = 5'h00;
  assign \$5  = None_r_data;
  assign None_r_addr = controller_None[4:0];
  assign \$12  = \$4 ;
  assign \spi_None$9  = \$3 ;
  assign \spi_None$8  = \$2 ;
  assign spi_None = \$1 ;
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top" *)
(* top =  1  *)
(* generator = "Amaranth" *)
module dratini0_pov_display_top(\$2 , \$1 );
  input [7:0] \$1 ;
  wire [7:0] \$1 ;
  output [7:0] \$2 ;
  wire [7:0] \$2 ;
  wire display_None;
  wire \display_None$3 ;
  wire \display_None$4 ;
  wire \display_None$5 ;
  wire [7:0] \display_None$6 ;
  wire display_clk;
  wire display_rst;
  display display (
    display_None,
    \display_None$3 ,
    \display_None$4 ,
    \display_None$5 ,
    \display_None$6 ,
    .clk(display_clk),
    .rst(display_rst)
  );
  assign \$2  = \display_None$6 ;
  assign \display_None$5  = \$1 [5];
  assign \display_None$4  = \$1 [4];
  assign \display_None$3  = \$1 [3];
  assign display_None = \$1 [2];
  assign display_rst = \$1 [1];
  assign display_clk = \$1 [0];
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display.spi.sck_edge" *)
(* generator = "Amaranth" *)
module sck_edge(rst, \$1 , \$2 , clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$6  = 0;
  input \$1 ;
  wire \$1 ;
  output \$2 ;
  wire \$2 ;
  reg \$3  = 1'h0;
  reg \$3$next ;
  wire \$4 ;
  wire \$6 ;
  input clk;
  wire clk;
  input rst;
  wire rst;
  assign \$4  = ~ \$3 ;
  assign \$6  = \$1  & \$4 ;
  always @(posedge clk)
    \$3  <= \$3$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \$3$next  = \$1 ;
    casez (rst)
      1'h1:
          \$3$next  = 1'h0;
    endcase
  end
  assign \$2  = \$6 ;
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display.spi" *)
(* generator = "Amaranth" *)
module spi(rst, \$1 , \$2 , \$3 , \$4 , \$5 , clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$7  = 0;
  input \$1 ;
  wire \$1 ;
  wire \$10 ;
  wire [3:0] \$12 ;
  wire [3:0] \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [9:0] \$19 ;
  input \$2 ;
  wire \$2 ;
  wire [9:0] \$20 ;
  wire \$22 ;
  wire \$24 ;
  input \$3 ;
  wire \$3 ;
  output [7:0] \$4 ;
  reg [7:0] \$4  = 8'h00;
  reg [7:0] \$4$next ;
  output \$5 ;
  wire \$5 ;
  reg [2:0] \$7  = 3'h0;
  reg [2:0] \$7$next ;
  wire \$8 ;
  input clk;
  wire clk;
  input rst;
  wire rst;
  wire sck_edge_None;
  wire \sck_edge_None$6 ;
  assign \$10  = \$8  & \sck_edge_None$6 ;
  assign \$13  = \$7  + 1'h1;
  assign \$15  = ~ \$1 ;
  assign \$17  = \$15  & \sck_edge_None$6 ;
  assign \$20  = { \$4 , 1'h0 } + \$3 ;
  assign \$22  = \$7  == 3'h7;
  assign \$24  = \sck_edge_None$6  & \$22 ;
  assign \$8  = ~ \$1 ;
  always @(posedge clk)
    \$4  <= \$4$next ;
  always @(posedge clk)
    \$7  <= \$7$next ;
  sck_edge sck_edge (
    sck_edge_None,
    \sck_edge_None$6 ,
    .clk(clk),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$7 ) begin end
    \$7$next  = \$7 ;
    casez (\$10 )
      /* src = "/home/bala/tt03-pov-display/src/pov_display.py:41" */
      1'h1:
          \$7$next  = \$13 [2:0];
    endcase
    casez (rst)
      1'h1:
          \$7$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$7 ) begin end
    \$4$next  = \$4 ;
    casez (\$17 )
      /* src = "/home/bala/tt03-pov-display/src/pov_display.py:41" */
      1'h1:
          \$4$next  = \$20 [7:0];
    endcase
    casez (rst)
      1'h1:
          \$4$next  = 8'h00;
    endcase
  end
  assign \$12  = \$13 ;
  assign \$19  = \$20 ;
  assign \$5  = \$24 ;
  assign sck_edge_None = \$2 ;
endmodule

