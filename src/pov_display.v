/* Generated by Yosys 0.23 (git sha1 7ce5011c24b) */

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display.controller" *)
(* generator = "Amaranth" *)
module controller(rst, addr, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$6  = 0;
  wire [8:0] \$1 ;
  wire [8:0] \$2 ;
  output [7:0] addr;
  reg [7:0] addr = 8'h00;
  reg [7:0] \addr$next ;
  input clk;
  wire clk;
  input rst;
  wire rst;
  assign \$2  = addr + 1'h1;
  always @(posedge clk)
    addr <= \addr$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \addr$next  = \$2 [7:0];
    casez (rst)
      1'h1:
          \addr$next  = 8'h00;
    endcase
  end
  assign \$1  = \$2 ;
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display" *)
(* generator = "Amaranth" *)
module display(rst, cs_n, sck, mosi, hall_in, leds, clk);
  wire [4:0] None_r_addr;
  wire [7:0] None_r_data;
  wire [4:0] None_w_addr;
  wire [7:0] None_w_data;
  wire None_w_en;
  input clk;
  wire clk;
  wire [7:0] controller_addr;
  input cs_n;
  wire cs_n;
  input hall_in;
  wire hall_in;
  wire \hall_in$3 ;
  output [7:0] leds;
  wire [7:0] leds;
  input mosi;
  wire mosi;
  input rst;
  wire rst;
  input sck;
  wire sck;
  wire [7:0] spi_addr;
  wire spi_cs_n;
  wire [7:0] spi_data;
  wire spi_mosi;
  wire spi_sck;
  wire spi_we;
  reg [7:0] \$1  [31:0];
  initial begin
    \$1 [0] = 8'h00;
    \$1 [1] = 8'h00;
    \$1 [2] = 8'h00;
    \$1 [3] = 8'h00;
    \$1 [4] = 8'h00;
    \$1 [5] = 8'h00;
    \$1 [6] = 8'h00;
    \$1 [7] = 8'h00;
    \$1 [8] = 8'h00;
    \$1 [9] = 8'h00;
    \$1 [10] = 8'h00;
    \$1 [11] = 8'h00;
    \$1 [12] = 8'h00;
    \$1 [13] = 8'h00;
    \$1 [14] = 8'h00;
    \$1 [15] = 8'h00;
    \$1 [16] = 8'h00;
    \$1 [17] = 8'h00;
    \$1 [18] = 8'h00;
    \$1 [19] = 8'h00;
    \$1 [20] = 8'h00;
    \$1 [21] = 8'h00;
    \$1 [22] = 8'h00;
    \$1 [23] = 8'h00;
    \$1 [24] = 8'h00;
    \$1 [25] = 8'h00;
    \$1 [26] = 8'h00;
    \$1 [27] = 8'h00;
    \$1 [28] = 8'h00;
    \$1 [29] = 8'h00;
    \$1 [30] = 8'h00;
    \$1 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (None_w_en)
      \$1 [None_w_addr] <= None_w_data;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= None_r_addr;
  end
  assign None_r_data = \$1 [_0_];
  controller controller (
    .addr(controller_addr),
    .clk(clk),
    .rst(rst)
  );
  spi spi (
    .addr(spi_addr),
    .clk(clk),
    .cs_n(spi_cs_n),
    .data(spi_data),
    .mosi(spi_mosi),
    .rst(rst),
    .sck(spi_sck),
    .we(spi_we)
  );
  assign None_w_en = spi_we;
  assign None_w_data = spi_data;
  assign None_w_addr = spi_addr[4:0];
  assign leds = None_r_data;
  assign None_r_addr = controller_addr[4:0];
  assign \hall_in$3  = hall_in;
  assign spi_mosi = mosi;
  assign spi_sck = sck;
  assign spi_cs_n = cs_n;
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top" *)
(* top =  1  *)
(* generator = "Amaranth" *)
module dratini0_pov_display_top(io_out, io_in);
  wire display_clk;
  wire display_cs_n;
  wire display_hall_in;
  wire [7:0] display_leds;
  wire display_mosi;
  wire display_rst;
  wire display_sck;
  input [7:0] io_in;
  wire [7:0] io_in;
  output [7:0] io_out;
  wire [7:0] io_out;
  display display (
    .clk(display_clk),
    .cs_n(display_cs_n),
    .hall_in(display_hall_in),
    .leds(display_leds),
    .mosi(display_mosi),
    .rst(display_rst),
    .sck(display_sck)
  );
  assign io_out = display_leds;
  assign display_hall_in = io_in[5];
  assign display_mosi = io_in[4];
  assign display_sck = io_in[3];
  assign display_cs_n = io_in[2];
  assign display_rst = io_in[1];
  assign display_clk = io_in[0];
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display.spi.sck_edge" *)
(* generator = "Amaranth" *)
module sck_edge(rst, in, out, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$7  = 0;
  wire \$1 ;
  wire \$3 ;
  input clk;
  wire clk;
  input in;
  wire in;
  reg last_in = 1'h0;
  reg \last_in$next ;
  output out;
  wire out;
  input rst;
  wire rst;
  assign \$1  = ~ last_in;
  assign \$3  = in & \$1 ;
  always @(posedge clk)
    last_in <= \last_in$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$7 ) begin end
    \last_in$next  = in;
    casez (rst)
      1'h1:
          \last_in$next  = 1'h0;
    endcase
  end
  assign out = \$3 ;
endmodule

(* \amaranth.hierarchy  = "dratini0_pov_display_top.display.spi" *)
(* generator = "Amaranth" *)
module spi(rst, cs_n, sck, mosi, addr, data, we, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$8  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [9:0] \$12 ;
  wire [9:0] \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [8:0] \$21 ;
  wire [8:0] \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire [3:0] \$5 ;
  wire [3:0] \$6 ;
  wire \$8 ;
  output [7:0] addr;
  reg [7:0] addr = 8'h00;
  reg [7:0] \addr$next ;
  reg [2:0] bit_index = 3'h0;
  reg [2:0] \bit_index$next ;
  input clk;
  wire clk;
  input cs_n;
  wire cs_n;
  output [7:0] data;
  reg [7:0] data = 8'h00;
  reg [7:0] \data$next ;
  input mosi;
  wire mosi;
  input rst;
  wire rst;
  input sck;
  wire sck;
  wire sck_edge_in;
  wire sck_edge_out;
  output we;
  wire we;
  assign \$10  = \$8  & sck_edge_out;
  assign \$13  = { data, 1'h0 } + mosi;
  assign \$15  = ~ cs_n;
  assign \$17  = \$15  & sck_edge_out;
  assign \$1  = ~ cs_n;
  assign \$19  = bit_index == 3'h7;
  assign \$22  = addr + 1'h1;
  assign \$24  = ~ cs_n;
  assign \$26  = \$24  & sck_edge_out;
  assign \$28  = bit_index == 3'h7;
  assign \$30  = \$26  & \$28 ;
  assign \$3  = \$1  & sck_edge_out;
  assign \$6  = bit_index + 1'h1;
  assign \$8  = ~ cs_n;
  always @(posedge clk)
    addr <= \addr$next ;
  always @(posedge clk)
    data <= \data$next ;
  always @(posedge clk)
    bit_index <= \bit_index$next ;
  sck_edge sck_edge (
    .clk(clk),
    .in(sck_edge_in),
    .out(sck_edge_out),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$8 ) begin end
    \bit_index$next  = bit_index;
    casez (\$3 )
      /* src = "/home/bala/tt03-pov-display/src/pov_display.py:41" */
      1'h1:
          \bit_index$next  = \$6 [2:0];
    endcase
    casez (rst)
      1'h1:
          \bit_index$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$8 ) begin end
    \data$next  = data;
    casez (\$10 )
      /* src = "/home/bala/tt03-pov-display/src/pov_display.py:41" */
      1'h1:
          \data$next  = \$13 [7:0];
    endcase
    casez (rst)
      1'h1:
          \data$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$8 ) begin end
    \addr$next  = addr;
    casez (\$17 )
      /* src = "/home/bala/tt03-pov-display/src/pov_display.py:41" */
      1'h1:
          casez (\$19 )
            /* src = "/home/bala/tt03-pov-display/src/pov_display.py:46" */
            1'h1:
                \addr$next  = \$22 [7:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \addr$next  = 8'h00;
    endcase
  end
  assign \$5  = \$6 ;
  assign \$12  = \$13 ;
  assign \$21  = \$22 ;
  assign we = \$30 ;
  assign sck_edge_in = sck;
endmodule

